{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_practice\\\\food_order_app\\\\src\\\\components\\\\Cart\\\\Checkout.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport classes from './Checkout.module.css';\nimport { useRef, useState } from \"react\"; // const isEmpty = value => value.trim()==='';\n// const isFiveChars = value => value.trim().length ===5;\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst isEmpty = value => value.trim() === '';\n\nconst isFiveChars = value => value.trim().length === 5;\n\nconst Checkout = props => {\n  _s();\n\n  const [formInputValidity, setFormInputValidity] = useState({\n    name: true,\n    street: true,\n    city: true,\n    postalCode: true\n  });\n  const nameInputRef = useRef();\n  const streetInputRef = useRef();\n  const postalCodeInputRef = useRef();\n  const cityInputRef = useRef();\n\n  const confirmHandler = event => {\n    event.preventDefault();\n    const entertedName = nameInputRef.current.value;\n    const entertedStreet = streetInputRef.current;\n    const entertedPostalcode = postalCodeInputRef.current;\n    const entertedCity = cityInputRef.current;\n    const entertedNameIsValid = !isEmpty(entertedName);\n    const entertedStreetIsValid = !isEmpty(entertedStreet);\n    const entertedCityIsValid = !isEmpty(entertedCity);\n    const entertedPostalCodeIsValid = isFiveChars(entertedPostalcode);\n    setFormInputValidity({\n      name: entertedNameIsValid,\n      street: entertedStreetIsValid,\n      city: entertedCityIsValid,\n      postalCode: entertedPostalCodeIsValid\n    });\n    const formIsValid = entertedNameIsValid && entertedStreetIsValid && entertedCityIsValid && entertedPostalCodeIsValid;\n\n    if (!formIsValid) {\n      return;\n    }\n\n    props.onConfirm({\n      name: entertedName,\n      street: entertedStreet,\n      postalCode: entertedPostalcode,\n      city: entertedCity\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: classes.form,\n    onSubmit: confirmHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputValidity.name ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"name\",\n        children: \"Your Name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"name\",\n        ref: nameInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), !formInputValidity.name && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputValidity.street ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"street\",\n        children: \"Street\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"street\",\n        ref: streetInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), !formInputValidity.street && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid street name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 39\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputValidity.postalCode ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"postal\",\n        children: \"Postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"postal\",\n        ref: postalCodeInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), !formInputValidity.postalCode && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid postal Code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputValidity.street ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"city\",\n        children: \"City\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"city\",\n        ref: cityInputRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this), !formInputValidity.city && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Please enter a valid city name\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 37\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `${classes.control} ${formInputValidity ? '' : classes.invalid}`,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"button\",\n        onClick: props.onCancel,\n        children: \"Cancel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: classes.submit,\n        children: \"Confirm\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Checkout, \"cHXhARbgRoLszn6Q6/8m1nFBxeo=\");\n\n_c = Checkout;\nexport default Checkout;\n\nvar _c;\n\n$RefreshReg$(_c, \"Checkout\");","map":{"version":3,"sources":["D:/React_practice/food_order_app/src/components/Cart/Checkout.js"],"names":["React","classes","useRef","useState","isEmpty","value","trim","isFiveChars","length","Checkout","props","formInputValidity","setFormInputValidity","name","street","city","postalCode","nameInputRef","streetInputRef","postalCodeInputRef","cityInputRef","confirmHandler","event","preventDefault","entertedName","current","entertedStreet","entertedPostalcode","entertedCity","entertedNameIsValid","entertedStreetIsValid","entertedCityIsValid","entertedPostalCodeIsValid","formIsValid","onConfirm","form","control","invalid","onCancel","submit"],"mappings":"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","sourcesContent":["import React from \"react\"\r\nimport classes from './Checkout.module.css';\r\nimport { useRef, useState } from \"react\";\r\n\r\n// const isEmpty = value => value.trim()==='';\r\n// const isFiveChars = value => value.trim().length ===5;\r\n\r\nconst isEmpty = (value) => value.trim() === '';\r\nconst isFiveChars = (value) => value.trim().length === 5;\r\n\r\nconst Checkout = (props) => {\r\n\r\n    const [formInputValidity, setFormInputValidity] = useState({\r\n        name:true,\r\n        street: true,\r\n        city:true,\r\n        postalCode: true\r\n    })\r\n\r\n    const nameInputRef = useRef();\r\n    const streetInputRef = useRef();\r\n    const postalCodeInputRef = useRef()\r\n    const cityInputRef = useRef()\r\n    const confirmHandler = (event) => {\r\n        event.preventDefault();\r\n        const entertedName = nameInputRef.current.value;\r\n        const entertedStreet = streetInputRef.current;\r\n        const entertedPostalcode = postalCodeInputRef.current;\r\n        const entertedCity = cityInputRef.current;\r\n\r\n        const entertedNameIsValid = !isEmpty(entertedName)\r\n        const entertedStreetIsValid = !isEmpty(entertedStreet)\r\n        const entertedCityIsValid = !isEmpty(entertedCity)\r\n        const entertedPostalCodeIsValid = isFiveChars(entertedPostalcode)\r\n\r\n        setFormInputValidity({\r\n            name: entertedNameIsValid,\r\n            street: entertedStreetIsValid,\r\n            city: entertedCityIsValid,\r\n            postalCode: entertedPostalCodeIsValid,\r\n        });\r\n\r\n        const formIsValid = entertedNameIsValid && entertedStreetIsValid && entertedCityIsValid && entertedPostalCodeIsValid\r\n        \r\n\r\n        if(!formIsValid){\r\n            return;\r\n        }\r\n        props.onConfirm({\r\n            name: entertedName,\r\n            street: entertedStreet,\r\n            postalCode: entertedPostalcode,\r\n            city: entertedCity\r\n        });\r\n  };\r\n\r\n  return (\r\n    <form className={classes.form} onSubmit={confirmHandler}>\r\n      <div className={`${classes.control} ${formInputValidity.name ? '' : classes.invalid}`}>\r\n        <label htmlFor='name'>Your Name</label>\r\n        <input type='text' id='name' ref={nameInputRef} />\r\n        {!formInputValidity.name && <p>Please enter a valid name</p>}\r\n      </div>\r\n      <div className={`${classes.control} ${formInputValidity.street  ? '' : classes.invalid }`}>\r\n        <label htmlFor='street'>Street</label>\r\n        <input type='text' id='street' ref = {streetInputRef} />\r\n        {!formInputValidity.street && <p>Please enter a valid street name</p>}\r\n      </div>\r\n      <div className={`${classes.control} ${formInputValidity.postalCode  ? '' : classes.invalid }`}>\r\n        <label htmlFor='postal'>Postal Code</label>\r\n        <input type='text' id='postal' ref  = {postalCodeInputRef} />\r\n        {!formInputValidity.postalCode && <p>Please enter a valid postal Code</p>}\r\n      </div>\r\n      <div className={`${classes.control} ${formInputValidity.street  ? '' : classes.invalid }`}>\r\n        <label htmlFor='city'>City</label>\r\n        <input type='text' id='city' ref = {cityInputRef} />\r\n        {!formInputValidity.city && <p>Please enter a valid city name</p>}\r\n      </div>\r\n      <div className={`${classes.control} ${formInputValidity  ? '' : classes.invalid }`}>\r\n        <button type='button' onClick={props.onCancel}>\r\n          Cancel\r\n        </button>\r\n        <button className={classes.submit}>Confirm</button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Checkout;"]},"metadata":{},"sourceType":"module"}