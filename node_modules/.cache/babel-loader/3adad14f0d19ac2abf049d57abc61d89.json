{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_practice\\\\food_order_app\\\\src\\\\store\\\\CarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //We will use concat rather than push because concat gives us a brand new array rather than changing the memory\n    //We don't want to change the memory state without React knowing about it, hence we will use concat rather than push\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    if (existingCartItem) {\n      const updatedItem = { ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    } else {\n      updatedItems = state.items.concat(action.item);\n    }\n\n    const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: newTotalAmount\n    };\n  }\n\n  if (action.type === \"REMOVE\") {\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.id);\n    const existingItem = state.items[existingCartItemIndex];\n    const updatedTotalAmount = state.totalAmount - existingItem.price;\n    let updatedItems;\n\n    if (existingItem.amount === 1) {\n      updatedItems = state.items.filter(item => item.id !== action.id);\n    } else {\n      const updatedItem = { ...existingItem,\n        amount: existingItem.amount - 1\n      };\n      updatedItems = [...state.items];\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n\n    return {\n      items: updatedItems,\n      totalAmount: updatedTotalAmount\n    };\n  }\n\n  if (action.type === \"CLEAR\") {\n    return defaultCartState;\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispacthCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispacthCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispacthCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const clearCartHanlder = () => {\n    dispacthCartAction({\n      type: \"CLEAR\"\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"feEa48wSuDdGOR3hkoYz/FOnY20=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/React_practice/food_order_app/src/store/CarProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","existingCartItemIndex","findIndex","item","id","existingCartItem","updatedItems","updatedItem","amount","concat","newTotalAmount","price","existingItem","updatedTotalAmount","filter","CartProvider","props","cartState","dispacthCartAction","addItemToCartHandler","removeItemFromCartHandler","clearCartHanlder","cartContext","addItem","removeItem","children"],"mappings":"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","sourcesContent":["import React, {useReducer} from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\n\r\nconst defaultCartState = {\r\n    items:[],\r\n    totalAmount:0\r\n}\r\n\r\nconst cartReducer = (state, action) =>{\r\n    if(action.type === \"ADD\"){\r\n\r\n        //We will use concat rather than push because concat gives us a brand new array rather than changing the memory\r\n        //We don't want to change the memory state without React knowing about it, hence we will use concat rather than push\r\n\r\n        const existingCartItemIndex = state.items.findIndex(item =>  (item.id===action.item.id))\r\n        const existingCartItem = state.items[existingCartItemIndex];\r\n        let updatedItems;\r\n\r\n        if(existingCartItem){\r\n            const updatedItem={\r\n                ...existingCartItem,\r\n                amount:existingCartItem.amount+action.item.amount\r\n            };\r\n            updatedItems=[...state.items]\r\n            updatedItems[existingCartItemIndex]=updatedItem;\r\n            \r\n        }\r\n        else{\r\n            updatedItems=state.items.concat(action.item)\r\n        }\r\n\r\n        const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: newTotalAmount\r\n        };\r\n\r\n    }\r\n\r\n    if(action.type === \"REMOVE\"){\r\n        \r\n        const existingCartItemIndex = state.items.findIndex(item =>  (item.id===action.id))\r\n        const existingItem  = state.items[existingCartItemIndex]\r\n        const updatedTotalAmount = state.totalAmount - existingItem.price;\r\n\r\n        let updatedItems;\r\n        if(existingItem.amount===1){\r\n            updatedItems = state.items.filter(item=>(item.id !== action.id))\r\n        }\r\n        else{\r\n            const updatedItem ={...existingItem, amount: existingItem.amount-1}\r\n            updatedItems = [...state.items];\r\n            updatedItems[existingCartItemIndex] = updatedItem;\r\n        }\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: updatedTotalAmount\r\n        }\r\n\r\n    }\r\n\r\n    if(action.type===\"CLEAR\"){\r\n        return defaultCartState;\r\n        \r\n    }\r\n    return defaultCartState\r\n};\r\n\r\nconst CartProvider = (props) =>{\r\n\r\n    const [cartState, dispacthCartAction] =useReducer(cartReducer, defaultCartState);\r\n    \r\n    const addItemToCartHandler = (item) =>{\r\n        dispacthCartAction({\r\n            type:'ADD',\r\n            item:item\r\n        })\r\n    }\r\n\r\n    const removeItemFromCartHandler = (id) =>{\r\n        dispacthCartAction({\r\n            type:'REMOVE',\r\n            id:id\r\n        })\r\n    }\r\n\r\n    const clearCartHanlder = () =>{\r\n        dispacthCartAction({type:\"CLEAR\"})\r\n    }\r\n\r\n    const cartContext = {\r\n        items:cartState.items,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler,\r\n    }\r\n\r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}