{"ast":null,"code":"var _jsxFileName = \"D:\\\\React_practice\\\\food_order_app\\\\src\\\\store\\\\CarProvider.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer } from \"react\";\nimport CartContext from \"./cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\n\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    //We will use concat rather than push because concat gives us a brand new array rather than changing the memory\n    //We don't want to change the memory state without React knowing about it, hence we will use concat rather than push\n    const updatedItems = state.items.concat(action.item);\n    const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\n    return {\n      items: updatedItems,\n      totalAmount: newTotalAmount\n    };\n  }\n\n  return defaultCartState;\n};\n\nconst CartProvider = props => {\n  _s();\n\n  const [cartState, dispacthCartAction] = useReducer(cartReducer, defaultCartState);\n\n  const addItemToCartHandler = item => {\n    dispacthCartAction({\n      type: 'ADD',\n      item: item\n    });\n  };\n\n  const removeItemFromCartHandler = id => {\n    dispacthCartAction({\n      type: 'REMOVE',\n      id: id\n    });\n  };\n\n  const cartContext = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemToCartHandler,\n    removeItem: removeItemFromCartHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartContext,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CartProvider, \"feEa48wSuDdGOR3hkoYz/FOnY20=\");\n\n_c = CartProvider;\nexport default CartProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"sources":["D:/React_practice/food_order_app/src/store/CarProvider.js"],"names":["React","useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedItems","concat","item","newTotalAmount","price","amount","CartProvider","props","cartState","dispacthCartAction","addItemToCartHandler","removeItemFromCartHandler","id","cartContext","addItem","removeItem","children"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,OAAOC,WAAP,MAAwB,gBAAxB;;AAGA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,KAAK,EAAC,EADe;AAErBC,EAAAA,WAAW,EAAC;AAFS,CAAzB;;AAKA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAkB;AAClC,MAAGA,MAAM,CAACC,IAAP,KAAgB,KAAnB,EAAyB;AAErB;AACA;AAEA,UAAMC,YAAY,GAAGH,KAAK,CAACH,KAAN,CAAYO,MAAZ,CAAmBH,MAAM,CAACI,IAA1B,CAArB;AACA,UAAMC,cAAc,GAAGN,KAAK,CAACF,WAAN,GAAoBG,MAAM,CAACI,IAAP,CAAYE,KAAZ,GAAoBN,MAAM,CAACI,IAAP,CAAYG,MAA3E;AACA,WAAO;AACHX,MAAAA,KAAK,EAAEM,YADJ;AAEHL,MAAAA,WAAW,EAAEQ;AAFV,KAAP;AAKH;;AACD,SAAOV,gBAAP;AACH,CAfD;;AAiBA,MAAMa,YAAY,GAAIC,KAAD,IAAU;AAAA;;AAE3B,QAAM,CAACC,SAAD,EAAYC,kBAAZ,IAAiClB,UAAU,CAACK,WAAD,EAAcH,gBAAd,CAAjD;;AAEA,QAAMiB,oBAAoB,GAAIR,IAAD,IAAS;AAClCO,IAAAA,kBAAkB,CAAC;AACfV,MAAAA,IAAI,EAAC,KADU;AAEfG,MAAAA,IAAI,EAACA;AAFU,KAAD,CAAlB;AAIH,GALD;;AAOA,QAAMS,yBAAyB,GAAIC,EAAD,IAAO;AACrCH,IAAAA,kBAAkB,CAAC;AACfV,MAAAA,IAAI,EAAC,QADU;AAEfa,MAAAA,EAAE,EAACA;AAFY,KAAD,CAAlB;AAIH,GALD;;AAOA,QAAMC,WAAW,GAAG;AAChBnB,IAAAA,KAAK,EAACc,SAAS,CAACd,KADA;AAEhBC,IAAAA,WAAW,EAACa,SAAS,CAACb,WAFN;AAGhBmB,IAAAA,OAAO,EAAEJ,oBAHO;AAIhBK,IAAAA,UAAU,EAAEJ;AAJI,GAApB;AAOA,sBACI,QAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEE,WAA7B;AAAA,cACKN,KAAK,CAACS;AADX;AAAA;AAAA;AAAA;AAAA,UADJ;AAKH,CA9BD;;GAAMV,Y;;KAAAA,Y;AAiCN,eAAeA,YAAf","sourcesContent":["import React, {useReducer} from \"react\";\r\nimport CartContext from \"./cart-context\";\r\n\r\n\r\nconst defaultCartState = {\r\n    items:[],\r\n    totalAmount:0\r\n}\r\n\r\nconst cartReducer = (state, action) =>{\r\n    if(action.type === \"ADD\"){\r\n\r\n        //We will use concat rather than push because concat gives us a brand new array rather than changing the memory\r\n        //We don't want to change the memory state without React knowing about it, hence we will use concat rather than push\r\n\r\n        const updatedItems = state.items.concat(action.item)\r\n        const newTotalAmount = state.totalAmount + action.item.price * action.item.amount;\r\n        return {\r\n            items: updatedItems,\r\n            totalAmount: newTotalAmount\r\n        };\r\n\r\n    }\r\n    return defaultCartState\r\n};\r\n\r\nconst CartProvider = (props) =>{\r\n\r\n    const [cartState, dispacthCartAction] =useReducer(cartReducer, defaultCartState);\r\n    \r\n    const addItemToCartHandler = (item) =>{\r\n        dispacthCartAction({\r\n            type:'ADD',\r\n            item:item\r\n        })\r\n    }\r\n\r\n    const removeItemFromCartHandler = (id) =>{\r\n        dispacthCartAction({\r\n            type:'REMOVE',\r\n            id:id\r\n        })\r\n    }\r\n\r\n    const cartContext = {\r\n        items:cartState.items,\r\n        totalAmount:cartState.totalAmount,\r\n        addItem: addItemToCartHandler,\r\n        removeItem: removeItemFromCartHandler,\r\n    }\r\n    \r\n    return (\r\n        <CartContext.Provider value={cartContext}>\r\n            {props.children}\r\n        </CartContext.Provider>\r\n    )\r\n};\r\n\r\n\r\nexport default CartProvider;"]},"metadata":{},"sourceType":"module"}